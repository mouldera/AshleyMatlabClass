%Assignment 5
%Ashley Moulder 10/12/17
%This assignment takes data from an imported file 'isok_data_6803.csv' and
%analayzes them through the use of functions. The functions will generate
%the means for the days and genders, as well as a function that creates a
%column that compares data from day to day, and a matrix of normalized
%means of the data. This assignment then outputs the data into a new excel
%file called 'iso_results.csv'.

%Calls function 'importfile' which imports the file 'isok_data_6803.csv'.
%This function will import the file as column vectors. This function also
%has code to convert the Gender column from category 'M' & 'F' to numbers
%'1' & '2' so it can be used later.
[SubjectID, Age, Gender, Weight, Day1, Day2, Day3] = importfile('isok_data_6803.csv', 2, 26);

%I was having trouble with scientific notation, so I made sure the format
%was the way I wanted it.
format shortG

%Calls the function 'genderIsoCalc'. Using the genders and the data for
%each day, the independent means, and total means for each gender is
%calculated
[maleIsoIndMeans, maleIsoGroupMean, femaleIsoIndMeans, femaleIsoGroupMean] = genderIsoCalc(Gender, Day1, Day2, Day3);

%Callst the function 'dayComparator', which uses subjectID and two days to
%and outputs the subjects who improved from one day to the next
day1toDay2 = dayComparator(SubjectID, Day1, Day2);


day2toDay3 = dayComparator(SubjectID, Day2, Day3);

%Calls the fucntinon 'normalizeWeight'. This takes input from the weight of
%the subject and the day to normalize the forces produced into a new
%matrix.
normDay1Mean = normalizeWeight(Weight, Day1);


normDay2Mean = normalizeWeight(Weight, Day2);


normDay3Mean = normalizeWeight(Weight, Day3);

%This creates a string matrix to be used as labels in the new excel sheet
excelMeanLabels = ["maleIsoIndMeans","maleIsoGroupMean", "femaleIsoIndMeans", "femaleIsoGroupMean"];
excelDayLabels = ["Day1", "Day2", "Day3"]';
excelDayComparatorLabels = ["Day 1 to Day 2", "Day 2 to Day 3"];
excelDayLabels2 = ["Day1", "Day2", "Day3"];

%This creates an excel worksheet for the Mean Values. This takes the results from
%the 'genderIsoCalc' function and exports it into the Mean Values worksheet
%in excel.
xlswrite('iso_results.csv', excelMeanLabels, 'Mean Values', 'B1')
xlswrite('iso_results.csv', excelDayLabels, 'Mean Values', 'A2')
xlswrite('iso_results.csv', maleIsoIndMeans, 'Mean Values', 'B2')
xlswrite('iso_results.csv', maleIsoGroupMean, 'Mean Values', 'C2')
xlswrite('iso_results.csv', femaleIsoIndMeans, 'Mean Values', 'D2')
xlswrite('iso_results.csv', femaleIsoGroupMean, 'Mean Values', 'E2')

%This creates an excel worksheet for the Day Comparator. This takes the results from
%the 'datComparator' function and exports it into the Day Comparator worksheet
%in excel.
xlswrite('iso_results.csv', excelDayComparatorLabels, 'Day Comparator', 'A1')
xlswrite('iso_results.csv', day1toDay2, 'Day Comparator', 'A2')
xlswrite('iso_results.csv', day2toDay3, 'Day Comparator', 'B2')

%This creates an excel worksheet for the Normalized Means. This takes the results from
%the 'normalizeWeight' function and exports it into the Normalized Means worksheet
%in excel.
xlswrite('iso_results.csv', excelDayLabels2, 'Normalized Means', 'A1')
xlswrite('iso_results.csv', [normDay1Mean, normDay2Mean, normDay3Mean], 'Normalized Means', 'A2')



function [SubjectID,Age,Gender,Weight,Day1,Day2,Day3] = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.

%Imports data from a file and outputs the columns as vectors for SubjectID(subject's #),
%Age(subject's age), Gender(subject's gender), Weight (subject's weight), Day1(the force for day1), Day2(the force for day2), and Day3 (the force for day3). 

%   [SUBJECTID,AGE,GENDER,WEIGHT,DAY1,DAY2,DAY3] = IMPORTFILE(FILENAME)
%   Reads data from text file FILENAME for the default selection.
%
%   [SUBJECTID,AGE,GENDER,WEIGHT,DAY1,DAY2,DAY3] = IMPORTFILE(FILENAME,
%   STARTROW, ENDROW) Reads data from rows STARTROW through ENDROW of text
%   file FILENAME.
%
% Example:
%   [SubjectID,Age,Gender,Weight,Day1,Day2,Day3] = importfile('isok_data_6803.csv',2, 26);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/10/05 11:45:42

% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%[^\n\r]';

% Open the text file.
fileID = fopen(filename,'r');

% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

% Close the text file.
fclose(fileID);

% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,4,5,6,7]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


% Split data into numeric and string columns.
rawNumericColumns = raw(:, [1,2,4,5,6,7]);
rawStringColumns = string(raw(:, 3));


% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
idx = (rawStringColumns(:, 1) == "<undefined>");
rawStringColumns(idx, 1) = "";

% Allocate imported array to column variable names
SubjectID = cell2mat(rawNumericColumns(:, 1));
Age = cell2mat(rawNumericColumns(:, 2));
Gender = categorical(rawStringColumns(:, 1));
Weight = cell2mat(rawNumericColumns(:, 3));
Day1 = cell2mat(rawNumericColumns(:, 4));
Day2 = cell2mat(rawNumericColumns(:, 5));
Day3 = cell2mat(rawNumericColumns(:, 6));

Gender = string(Gender); %Changes the Gender column from a category to a string and reassigns to number string array
for i = 1:length(Gender)
    if Gender(i) == 'M'
        Gender(i) = 1;
    elseif Gender(i) == 'F'
        Gender(i) = 2;
    end
end
Gender = str2double(Gender); %Changes the Gender column from a string to a numeric array so it can be used in the other functions as a number instead of a string

end

function [maleIsoIndMeans, maleIsoGroupMean, femaleIsoIndMeans, femaleIsoGroupMean] = genderIsoCalc(Gender, Day1, Day2, Day3)
%genderIsoCalc Summary
%   Takes the data from the columns Gender, Day1, Day2, and Day3 from the
%   imported file. It then determines each row that belongs to a male or
%   female and calculates the male and female mean forces for each day(maleIsoIndMeans, femaleIsoIndMeans), and
%   then the mean across the three days for both genders (maleIsoGroupMean, femaleIsoGroupmean). 

isoMatrix = [Gender, Day1, Day2, Day3]; %Creates a ne matrix with all the column arrays. Initializes the variables used in the for loops of this function
maleSumDay1 = 0;
maleSumDay2 = 0;
maleSumDay3 = 0;
femaleSumDay1 = 0;
femaleSumDay2 = 0;
femaleSumDay3 = 0;
maleCount = 0;
femaleCount = 0;

for i = 1:length(isoMatrix)
    if Gender(i) == 1 %If the row belongs to a male subject
        maleSumDay1 = maleSumDay1 + Day1(i); %Adds all of the male forces for day 1
        maleSumDay2 = Day2(i) + maleSumDay2; %Adds all of the male forces for day 2
        maleSumDay3 = Day3(i) + maleSumDay3; %Adds all of the male forces for day 3 
        maleCount = maleCount + 1; %Keeps count of the number of male subjects in this data set
    else
        continue
    end
end


%Divides the sum of each day by the number of male participants to
%determine the mean force for all males on each day
maleIsoIndMeans = [(maleSumDay1/maleCount), (maleSumDay2/maleCount), (maleSumDay1/maleCount)]';

%Finds the mean force for the male subjects across all three days.
maleIsoGroupMean = (mean(maleIsoIndMeans));

for i = 1:length(isoMatrix)
    if Gender(i) == 2 %Finds the rows with female subjects
        femaleSumDay1 = femaleSumDay1 + Day1(i); %Adds the forces for each female on day1
        femaleSumDay2 = Day2(i) + femaleSumDay2; %Adds the forces for each female on day2
        femaleSumDay3 = Day3(i) + femaleSumDay3; %Adds the forces for each female on day3
        femaleCount = femaleCount +1; %Keeps count of the number of female subjects
    else
        continue
    end
end

%Divides the sum of the forces produced by females for each day by the
%number of female subjects to determine the mean force produced by females
femaleIsoIndMeans = [(femaleSumDay1/femaleCount), (femaleSumDay2/femaleCount), (femaleSumDay3/femaleCount)]';

%Calculates the mean force produced by females across all three days
femaleIsoGroupMean = (mean(femaleIsoIndMeans));

end

function [increaseIsoMatrix] = dayComparator(SubjectID, firstDay, secondDay )
%dayComparator Summary
%   Creates a new column with the subjectIDs who improved from the first
%   day input to the second day input. 

subjectDayMatrix = [SubjectID, firstDay, secondDay]; %Creates a matrix of the input columns
increaseIso = zeros(50,1); %Initializes a matrix for the new column of subjectIDs being created
for i = 1:length(subjectDayMatrix) %Goes through the entire matrix and then stops
    if (secondDay(i) - firstDay(i)) > 0 %If the second day was greater than the first day, the difference will be greater than zero
        continue
    end
    increaseIso(i) = (SubjectID(i)); %Creates a new array column with the subjectIDs that meet the requirments above, however the ones that were not larger are now zeros
end

increaseIsoMatrix = increaseIso(increaseIso ~= 0); %Creaes a new column without the zeros and only SubjectIDs

end

function [ normIsoMean ] = normalizeWeight( Weight, day )
%normalizeWeight Summary
%   normalizes the forces for each subject and then averages the normal
%   forces for the day input

normalizeWeightMatrix = [ Weight, day]; %Creates a matrix for the weight and day input
normIso = zeros(25,1); %initializes an array for the normalized forces

for i = 1:length(normalizeWeightMatrix) %Goes through the length of the matrix
    normIso(i) = (day(i)/Weight(i)); %normalizes the forces for the day by dividing the force by the subject's weight for the day input
end

normIsoMean = mean(normIso); %Creates a mean normalized force from the normalized forces for the one day.

end